type Beverage implements Node {
  """Reads a single `Company` that is related to this `Beverage`."""
  companyByCompanyId: Company

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByDistributorId: Company
  companyId: Int!
  distributorId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Beverage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BeverageCondition {
  """Checks for equality with the object’s `companyId` field."""
  companyId: Int

  """Checks for equality with the object’s `distributorId` field."""
  distributorId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `Beverage` values."""
type BeveragesConnection {
  """
  A list of edges which contains the `Beverage` and cursor to aid in pagination.
  """
  edges: [BeveragesEdge!]!

  """A list of `Beverage` objects."""
  nodes: [Beverage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Beverage` you could get from the connection."""
  totalCount: Int!
}

"""A `Beverage` edge in the connection."""
type BeveragesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Beverage` at the end of the edge."""
  node: Beverage
}

"""Methods to use when ordering `Beverage`."""
enum BeveragesOrderBy {
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  DISTRIBUTOR_ID_ASC
  DISTRIBUTOR_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Company` values."""
type CompaniesConnection {
  """
  A list of edges which contains the `Company` and cursor to aid in pagination.
  """
  edges: [CompaniesEdge!]!

  """A list of `Company` objects."""
  nodes: [Company]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection."""
type CompaniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Company` at the end of the edge."""
  node: Company
}

"""Methods to use when ordering `Company`."""
enum CompaniesOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Company implements Node {
  """Reads and enables pagination through a set of `Beverage`."""
  beveragesByCompanyId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BeveragesConnection!

  """Reads and enables pagination through a set of `Beverage`."""
  beveragesByCompanyIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]
  ): [Beverage!]!

  """Reads and enables pagination through a set of `Beverage`."""
  computedListInclude(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): BeveragesConnection!

  """Reads and enables pagination through a set of `Beverage`."""
  computedListIncludeList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Beverage]

  """Reads and enables pagination through a set of `Beverage`."""
  computedListOmit(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): BeveragesConnection!

  """Reads and enables pagination through a set of `Beverage`."""
  computedListOmitList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Beverage]

  """Reads and enables pagination through a set of `Beverage`."""
  distributedBeverages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BeveragesConnection!

  """Reads and enables pagination through a set of `Beverage`."""
  distributedBeveragesListing(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]
  ): [Beverage!]!
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Company` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CompanyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Beverage`."""
  allBeverages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BeveragesConnection

  """Reads a set of `Beverage`."""
  allBeveragesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]
  ): [Beverage!]

  """Reads and enables pagination through a set of `Company`."""
  allCompanies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection

  """Reads a set of `Company`."""
  allCompaniesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!]
  ): [Company!]

  """Reads a single `Beverage` using its globally unique `ID`."""
  beverage(
    """The globally unique `ID` to be used in selecting a single `Beverage`."""
    nodeId: ID!
  ): Beverage
  beverageById(id: Int!): Beverage

  """Reads a single `Company` using its globally unique `ID`."""
  company(
    """The globally unique `ID` to be used in selecting a single `Company`."""
    nodeId: ID!
  ): Company
  companyById(id: Int!): Company

  """Reads and enables pagination through a set of `Beverage`."""
  listInclude(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): BeveragesConnection

  """Reads and enables pagination through a set of `Beverage`."""
  listIncludeList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Beverage]

  """Reads and enables pagination through a set of `Beverage`."""
  listOmit(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): BeveragesConnection

  """Reads and enables pagination through a set of `Beverage`."""
  listOmitList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Beverage]

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}
