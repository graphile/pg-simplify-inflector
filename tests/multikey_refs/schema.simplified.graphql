"""All input for the create `GoalContributor` mutation."""
input CreateGoalContributorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GoalContributor` to be created by this mutation."""
  goalContributor: GoalContributorInput!
}

"""The output of our create `GoalContributor` mutation."""
type CreateGoalContributorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `GoalContributor`."""
  contributor: User

  """The `GoalContributor` that was created by this mutation."""
  goalContributor: GoalContributor

  """An edge for our `GoalContributor`. May be used by Relay 1."""
  goalContributorEdge(
    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsEdge

  """
  Reads a single `Organization` that is related to this `GoalContributor`.
  """
  organization: Organization

  """Reads a single `Goal` that is related to this `GoalContributor`."""
  organizationTeamGoal: Goal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `GoalContributor`."""
  team: Team
}

"""All input for the create `Goal` mutation."""
input CreateGoalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Goal` to be created by this mutation."""
  goal: GoalInput!
}

"""The output of our create `Goal` mutation."""
type CreateGoalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Goal` that was created by this mutation."""
  goal: Goal

  """An edge for our `Goal`. May be used by Relay 1."""
  goalEdge(
    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalsEdge

  """Reads a single `Organization` that is related to this `Goal`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `Goal`."""
  team: Team
}

"""All input for the create `Organization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organization` to be created by this mutation."""
  organization: OrganizationInput!
}

"""The output of our create `Organization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was created by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Team` mutation."""
input CreateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Team` to be created by this mutation."""
  team: TeamInput!
}

"""The output of our create `Team` mutation."""
type CreateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Team` that was created by this mutation."""
  team: Team

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteGoalByNodeId` mutation."""
input DeleteGoalByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Goal` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGoalContributorByNodeId` mutation."""
input DeleteGoalContributorByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GoalContributor` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGoalContributor` mutation."""
input DeleteGoalContributorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `GoalContributor` mutation."""
type DeleteGoalContributorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `GoalContributor`."""
  contributor: User
  deletedGoalContributorNodeId: ID

  """The `GoalContributor` that was deleted by this mutation."""
  goalContributor: GoalContributor

  """An edge for our `GoalContributor`. May be used by Relay 1."""
  goalContributorEdge(
    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsEdge

  """
  Reads a single `Organization` that is related to this `GoalContributor`.
  """
  organization: Organization

  """Reads a single `Goal` that is related to this `GoalContributor`."""
  organizationTeamGoal: Goal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `GoalContributor`."""
  team: Team
}

"""All input for the `deleteGoal` mutation."""
input DeleteGoalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  goalUuid: UUID!
  organizationId: Int!
  teamId: Int!
}

"""The output of our delete `Goal` mutation."""
type DeleteGoalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGoalNodeId: ID

  """The `Goal` that was deleted by this mutation."""
  goal: Goal

  """An edge for our `Goal`. May be used by Relay 1."""
  goalEdge(
    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalsEdge

  """Reads a single `Organization` that is related to this `Goal`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `Goal`."""
  team: Team
}

"""All input for the `deleteOrganizationByNodeId` mutation."""
input DeleteOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Organization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOrganizationNodeId: ID

  """The `Organization` that was deleted by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTeamByNodeId` mutation."""
input DeleteTeamByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTeam` mutation."""
input DeleteTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Team` mutation."""
type DeleteTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTeamNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Team` that was deleted by this mutation."""
  team: Team

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamsEdge
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type Goal implements Node {
  aim: String

  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributorsByOrganizationIdAndTeamIdAndGoalUuid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsConnection!

  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributorsByOrganizationIdAndTeamIdAndGoalUuidList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!]
  ): [GoalContributor!]!
  goalUuid: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Organization` that is related to this `Goal`."""
  organization: Organization
  organizationId: Int!

  """Reads a single `Team` that is related to this `Goal`."""
  team: Team
  teamId: Int!
}

"""
A condition to be used against `Goal` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GoalCondition {
  """Checks for equality with the object’s `aim` field."""
  aim: String

  """Checks for equality with the object’s `goalUuid` field."""
  goalUuid: UUID

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: Int
}

type GoalContributor implements Node {
  contribution: String

  """Reads a single `User` that is related to this `GoalContributor`."""
  contributor: User
  contributorId: Int!
  goalUuid: UUID!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Organization` that is related to this `GoalContributor`.
  """
  organization: Organization
  organizationId: Int!

  """Reads a single `Goal` that is related to this `GoalContributor`."""
  organizationTeamGoal: Goal

  """Reads a single `Team` that is related to this `GoalContributor`."""
  team: Team
  teamId: Int!
}

"""
A condition to be used against `GoalContributor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GoalContributorCondition {
  """Checks for equality with the object’s `contribution` field."""
  contribution: String

  """Checks for equality with the object’s `contributorId` field."""
  contributorId: Int

  """Checks for equality with the object’s `goalUuid` field."""
  goalUuid: UUID

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: Int

  """Checks for equality with the object’s `teamId` field."""
  teamId: Int
}

"""An input for mutations affecting `GoalContributor`"""
input GoalContributorInput {
  contribution: String
  contributorId: Int!
  goalUuid: UUID!
  id: Int
  organizationId: Int!
  teamId: Int!
}

"""
Represents an update to a `GoalContributor`. Fields that are set will be updated.
"""
input GoalContributorPatch {
  contribution: String
  contributorId: Int
  goalUuid: UUID
  id: Int
  organizationId: Int
  teamId: Int
}

"""A connection to a list of `GoalContributor` values."""
type GoalContributorsConnection {
  """
  A list of edges which contains the `GoalContributor` and cursor to aid in pagination.
  """
  edges: [GoalContributorsEdge!]!

  """A list of `GoalContributor` objects."""
  nodes: [GoalContributor]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GoalContributor` you could get from the connection.
  """
  totalCount: Int!
}

"""A `GoalContributor` edge in the connection."""
type GoalContributorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GoalContributor` at the end of the edge."""
  node: GoalContributor
}

"""Methods to use when ordering `GoalContributor`."""
enum GoalContributorsOrderBy {
  CONTRIBUTION_ASC
  CONTRIBUTION_DESC
  CONTRIBUTOR_ID_ASC
  CONTRIBUTOR_ID_DESC
  GOAL_UUID_ASC
  GOAL_UUID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
}

"""An input for mutations affecting `Goal`"""
input GoalInput {
  aim: String
  goalUuid: UUID
  organizationId: Int!
  teamId: Int!
}

"""Represents an update to a `Goal`. Fields that are set will be updated."""
input GoalPatch {
  aim: String
  goalUuid: UUID
  organizationId: Int
  teamId: Int
}

"""A connection to a list of `Goal` values."""
type GoalsConnection {
  """
  A list of edges which contains the `Goal` and cursor to aid in pagination.
  """
  edges: [GoalsEdge!]!

  """A list of `Goal` objects."""
  nodes: [Goal]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Goal` you could get from the connection."""
  totalCount: Int!
}

"""A `Goal` edge in the connection."""
type GoalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Goal` at the end of the edge."""
  node: Goal
}

"""Methods to use when ordering `Goal`."""
enum GoalsOrderBy {
  AIM_ASC
  AIM_DESC
  GOAL_UUID_ASC
  GOAL_UUID_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEAM_ID_ASC
  TEAM_ID_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Goal`."""
  createGoal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGoalInput!
  ): CreateGoalPayload

  """Creates a single `GoalContributor`."""
  createGoalContributor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGoalContributorInput!
  ): CreateGoalContributorPayload

  """Creates a single `Organization`."""
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `Team`."""
  createTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamInput!
  ): CreateTeamPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Deletes a single `Goal` using a unique key."""
  deleteGoal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGoalInput!
  ): DeleteGoalPayload

  """Deletes a single `Goal` using its globally unique id."""
  deleteGoalByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGoalByNodeIdInput!
  ): DeleteGoalPayload

  """Deletes a single `GoalContributor` using a unique key."""
  deleteGoalContributor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGoalContributorInput!
  ): DeleteGoalContributorPayload

  """Deletes a single `GoalContributor` using its globally unique id."""
  deleteGoalContributorByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGoalContributorByNodeIdInput!
  ): DeleteGoalContributorPayload

  """Deletes a single `Organization` using a unique key."""
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Organization` using its globally unique id."""
  deleteOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationByNodeIdInput!
  ): DeleteOrganizationPayload

  """Deletes a single `Team` using a unique key."""
  deleteTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamInput!
  ): DeleteTeamPayload

  """Deletes a single `Team` using its globally unique id."""
  deleteTeamByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamByNodeIdInput!
  ): DeleteTeamPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Updates a single `Goal` using a unique key and a patch."""
  updateGoal(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGoalInput!
  ): UpdateGoalPayload

  """Updates a single `Goal` using its globally unique id and a patch."""
  updateGoalByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGoalByNodeIdInput!
  ): UpdateGoalPayload

  """Updates a single `GoalContributor` using a unique key and a patch."""
  updateGoalContributor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGoalContributorInput!
  ): UpdateGoalContributorPayload

  """
  Updates a single `GoalContributor` using its globally unique id and a patch.
  """
  updateGoalContributorByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGoalContributorByNodeIdInput!
  ): UpdateGoalContributorPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Team` using a unique key and a patch."""
  updateTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamInput!
  ): UpdateTeamPayload

  """Updates a single `Team` using its globally unique id and a patch."""
  updateTeamByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamByNodeIdInput!
  ): UpdateTeamPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsConnection!

  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!]
  ): [GoalContributor!]!

  """Reads and enables pagination through a set of `Goal`."""
  goals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalsConnection!

  """Reads and enables pagination through a set of `Goal`."""
  goalsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!]
  ): [Goal!]!
  id: Int!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Organization`"""
input OrganizationInput {
  id: Int
  name: String
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  id: Int
  name: String
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of `Organization` objects."""
  nodes: [Organization]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  goal(goalUuid: UUID!, organizationId: Int!, teamId: Int!): Goal

  """Reads a single `Goal` using its globally unique `ID`."""
  goalByNodeId(
    """The globally unique `ID` to be used in selecting a single `Goal`."""
    nodeId: ID!
  ): Goal
  goalContributor(id: Int!): GoalContributor

  """Reads a single `GoalContributor` using its globally unique `ID`."""
  goalContributorByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GoalContributor`.
    """
    nodeId: ID!
  ): GoalContributor

  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsConnection

  """Reads a set of `GoalContributor`."""
  goalContributorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!]
  ): [GoalContributor!]

  """Reads and enables pagination through a set of `Goal`."""
  goals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalsConnection

  """Reads a set of `Goal`."""
  goalsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!]
  ): [Goal!]

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  organization(id: Int!): Organization

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Reads a set of `Organization`."""
  organizationsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]
  ): [Organization!]

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  team(id: Int!): Team

  """Reads a single `Team` using its globally unique `ID`."""
  teamByNodeId(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team

  """Reads and enables pagination through a set of `Team`."""
  teams(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamsConnection

  """Reads a set of `Team`."""
  teamsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]
  ): [Team!]
  user(id: Int!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection

  """Reads a set of `User`."""
  usersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
  ): [User!]
}

type Team implements Node {
  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsConnection!

  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributorsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!]
  ): [GoalContributor!]!

  """Reads and enables pagination through a set of `Goal`."""
  goals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalsConnection!

  """Reads and enables pagination through a set of `Goal`."""
  goalsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!]
  ): [Goal!]!
  id: Int!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Team`"""
input TeamInput {
  id: Int
  name: String
}

"""Represents an update to a `Team`. Fields that are set will be updated."""
input TeamPatch {
  id: Int
  name: String
}

"""A connection to a list of `Team` values."""
type TeamsConnection {
  """
  A list of edges which contains the `Team` and cursor to aid in pagination.
  """
  edges: [TeamsEdge!]!

  """A list of `Team` objects."""
  nodes: [Team]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Team` you could get from the connection."""
  totalCount: Int!
}

"""A `Team` edge in the connection."""
type TeamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Team` at the end of the edge."""
  node: Team
}

"""Methods to use when ordering `Team`."""
enum TeamsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateGoalByNodeId` mutation."""
input UpdateGoalByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Goal` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Goal` being updated.
  """
  patch: GoalPatch!
}

"""All input for the `updateGoalContributorByNodeId` mutation."""
input UpdateGoalContributorByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GoalContributor` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GoalContributor` being updated.
  """
  patch: GoalContributorPatch!
}

"""All input for the `updateGoalContributor` mutation."""
input UpdateGoalContributorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `GoalContributor` being updated.
  """
  patch: GoalContributorPatch!
}

"""The output of our update `GoalContributor` mutation."""
type UpdateGoalContributorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `GoalContributor`."""
  contributor: User

  """The `GoalContributor` that was updated by this mutation."""
  goalContributor: GoalContributor

  """An edge for our `GoalContributor`. May be used by Relay 1."""
  goalContributorEdge(
    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsEdge

  """
  Reads a single `Organization` that is related to this `GoalContributor`.
  """
  organization: Organization

  """Reads a single `Goal` that is related to this `GoalContributor`."""
  organizationTeamGoal: Goal

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `GoalContributor`."""
  team: Team
}

"""All input for the `updateGoal` mutation."""
input UpdateGoalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  goalUuid: UUID!
  organizationId: Int!

  """
  An object where the defined keys will be set on the `Goal` being updated.
  """
  patch: GoalPatch!
  teamId: Int!
}

"""The output of our update `Goal` mutation."""
type UpdateGoalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Goal` that was updated by this mutation."""
  goal: Goal

  """An edge for our `Goal`. May be used by Relay 1."""
  goalEdge(
    """The method to use when ordering `Goal`."""
    orderBy: [GoalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalsEdge

  """Reads a single `Organization` that is related to this `Goal`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Team` that is related to this `Goal`."""
  team: Team
}

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTeamByNodeId` mutation."""
input UpdateTeamByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  patch: TeamPatch!
}

"""All input for the `updateTeam` mutation."""
input UpdateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  patch: TeamPatch!
}

"""The output of our update `Team` mutation."""
type UpdateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Team` that was updated by this mutation."""
  team: Team

  """An edge for our `Team`. May be used by Relay 1."""
  teamEdge(
    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TeamsEdge
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributorsByContributorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GoalContributorsConnection!

  """Reads and enables pagination through a set of `GoalContributor`."""
  goalContributorsByContributorIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoalContributorCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GoalContributor`."""
    orderBy: [GoalContributorsOrderBy!]
  ): [GoalContributor!]!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
}
