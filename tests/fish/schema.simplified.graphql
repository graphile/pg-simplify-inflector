"""All input for the create `Fish` mutation."""
input CreateFishInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Fish` to be created by this mutation."""
  fish: FishInput!
}

"""The output of our create `Fish` mutation."""
type CreateFishPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fish` that was created by this mutation."""
  fish: Fish

  """An edge for our `Fish`. May be used by Relay 1."""
  fishEdge(
    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FishEdge

  """Reads a single `Pond` that is related to this `Fish`."""
  pond: Pond

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Pond` mutation."""
input CreatePondInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Pond` to be created by this mutation."""
  pond: PondInput!
}

"""The output of our create `Pond` mutation."""
type CreatePondPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pond` that was created by this mutation."""
  pond: Pond

  """An edge for our `Pond`. May be used by Relay 1."""
  pondEdge(
    """The method to use when ordering `Pond`."""
    orderBy: [PondsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PondsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteFishByNodeId` mutation."""
input DeleteFishByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fish` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFish` mutation."""
input DeleteFishInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Fish` mutation."""
type DeleteFishPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFishNodeId: ID

  """The `Fish` that was deleted by this mutation."""
  fish: Fish

  """An edge for our `Fish`. May be used by Relay 1."""
  fishEdge(
    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FishEdge

  """Reads a single `Pond` that is related to this `Fish`."""
  pond: Pond

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePondByNodeId` mutation."""
input DeletePondByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pond` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePond` mutation."""
input DeletePondInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Pond` mutation."""
type DeletePondPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPondNodeId: ID

  """The `Pond` that was deleted by this mutation."""
  pond: Pond

  """An edge for our `Pond`. May be used by Relay 1."""
  pondEdge(
    """The method to use when ordering `Pond`."""
    orderBy: [PondsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PondsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Fish implements Node {
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Pond` that is related to this `Fish`."""
  pond: Pond
  pondId: Int!
}

"""
A condition to be used against `Fish` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FishCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `pondId` field."""
  pondId: Int
}

"""A connection to a list of `Fish` values."""
type FishConnection {
  """
  A list of edges which contains the `Fish` and cursor to aid in pagination.
  """
  edges: [FishEdge]!

  """A list of `Fish` objects."""
  nodes: [Fish]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fish` you could get from the connection."""
  totalCount: Int!
}

"""A `Fish` edge in the connection."""
type FishEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Fish` at the end of the edge."""
  node: Fish
}

"""An input for mutations affecting `Fish`"""
input FishInput {
  id: Int
  name: String!
  pondId: Int!
}

"""Methods to use when ordering `Fish`."""
enum FishOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  POND_ID_ASC
  POND_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Fish`. Fields that are set will be updated."""
input FishPatch {
  id: Int
  name: String
  pondId: Int
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Fish`."""
  createFish(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFishInput!
  ): CreateFishPayload

  """Creates a single `Pond`."""
  createPond(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePondInput!
  ): CreatePondPayload

  """Deletes a single `Fish` using a unique key."""
  deleteFish(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFishInput!
  ): DeleteFishPayload

  """Deletes a single `Fish` using its globally unique id."""
  deleteFishByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFishByNodeIdInput!
  ): DeleteFishPayload

  """Deletes a single `Pond` using a unique key."""
  deletePond(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePondInput!
  ): DeletePondPayload

  """Deletes a single `Pond` using its globally unique id."""
  deletePondByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePondByNodeIdInput!
  ): DeletePondPayload

  """Updates a single `Fish` using a unique key and a patch."""
  updateFish(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFishInput!
  ): UpdateFishPayload

  """Updates a single `Fish` using its globally unique id and a patch."""
  updateFishByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFishByNodeIdInput!
  ): UpdateFishPayload

  """Updates a single `Pond` using a unique key and a patch."""
  updatePond(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePondInput!
  ): UpdatePondPayload

  """Updates a single `Pond` using its globally unique id and a patch."""
  updatePondByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePondByNodeIdInput!
  ): UpdatePondPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Pond implements Node {
  """Reads and enables pagination through a set of `Fish`."""
  fishes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FishCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!] = [PRIMARY_KEY_ASC]
  ): FishConnection!

  """Reads and enables pagination through a set of `Fish`."""
  fishesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FishCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!]
  ): [Fish!]!
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Pond` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PondCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Pond`"""
input PondInput {
  id: Int
  name: String!
}

"""Represents an update to a `Pond`. Fields that are set will be updated."""
input PondPatch {
  id: Int
  name: String
}

"""A connection to a list of `Pond` values."""
type PondsConnection {
  """
  A list of edges which contains the `Pond` and cursor to aid in pagination.
  """
  edges: [PondsEdge]!

  """A list of `Pond` objects."""
  nodes: [Pond]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Pond` you could get from the connection."""
  totalCount: Int!
}

"""A `Pond` edge in the connection."""
type PondsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Pond` at the end of the edge."""
  node: Pond
}

"""Methods to use when ordering `Pond`."""
enum PondsOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Get a single `Fish`."""
  fish(id: Int!): Fish

  """Reads a single `Fish` using its globally unique `ID`."""
  fishByNodeId(
    """The globally unique `ID` to be used in selecting a single `Fish`."""
    nodeId: ID!
  ): Fish

  """Reads and enables pagination through a set of `Fish`."""
  fishes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FishCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!] = [PRIMARY_KEY_ASC]
  ): FishConnection
  fishesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FishCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!]
  ): [Fish!]

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Get a single `Pond`."""
  pond(id: Int!): Pond

  """Reads a single `Pond` using its globally unique `ID`."""
  pondByNodeId(
    """The globally unique `ID` to be used in selecting a single `Pond`."""
    nodeId: ID!
  ): Pond

  """Reads and enables pagination through a set of `Pond`."""
  ponds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PondCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Pond`."""
    orderBy: [PondsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PondsConnection
  pondsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PondCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Pond`."""
    orderBy: [PondsOrderBy!]
  ): [Pond!]

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the `updateFishByNodeId` mutation."""
input UpdateFishByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fish` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Fish` being updated.
  """
  patch: FishPatch!
}

"""All input for the `updateFish` mutation."""
input UpdateFishInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Fish` being updated.
  """
  patch: FishPatch!
}

"""The output of our update `Fish` mutation."""
type UpdateFishPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fish` that was updated by this mutation."""
  fish: Fish

  """An edge for our `Fish`. May be used by Relay 1."""
  fishEdge(
    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FishEdge

  """Reads a single `Pond` that is related to this `Fish`."""
  pond: Pond

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePondByNodeId` mutation."""
input UpdatePondByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Pond` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Pond` being updated.
  """
  patch: PondPatch!
}

"""All input for the `updatePond` mutation."""
input UpdatePondInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Pond` being updated.
  """
  patch: PondPatch!
}

"""The output of our update `Pond` mutation."""
type UpdatePondPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Pond` that was updated by this mutation."""
  pond: Pond

  """An edge for our `Pond`. May be used by Relay 1."""
  pondEdge(
    """The method to use when ordering `Pond`."""
    orderBy: [PondsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PondsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}