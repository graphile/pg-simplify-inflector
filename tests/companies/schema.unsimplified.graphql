type Beverage implements Node {
  """Reads a single `Company` that is related to this `Beverage`."""
  companyByCompanyId: Company

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByDistributorId: Company
  companyId: Int!
  distributorId: Int
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Beverage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BeverageCondition {
  """Checks for equality with the object’s `companyId` field."""
  companyId: Int

  """Checks for equality with the object’s `distributorId` field."""
  distributorId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Beverage`"""
input BeverageInput {
  companyId: Int!
  distributorId: Int
  id: Int
  name: String!
}

"""
Represents an update to a `Beverage`. Fields that are set will be updated.
"""
input BeveragePatch {
  companyId: Int
  distributorId: Int
  id: Int
  name: String
}

"""A connection to a list of `Beverage` values."""
type BeveragesConnection {
  """
  A list of edges which contains the `Beverage` and cursor to aid in pagination.
  """
  edges: [BeveragesEdge]!

  """A list of `Beverage` objects."""
  nodes: [Beverage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Beverage` you could get from the connection."""
  totalCount: Int!
}

"""A `Beverage` edge in the connection."""
type BeveragesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Beverage` at the end of the edge."""
  node: Beverage
}

"""Methods to use when ordering `Beverage`."""
enum BeveragesOrderBy {
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  DISTRIBUTOR_ID_ASC
  DISTRIBUTOR_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Company` values."""
type CompaniesConnection {
  """
  A list of edges which contains the `Company` and cursor to aid in pagination.
  """
  edges: [CompaniesEdge]!

  """A list of `Company` objects."""
  nodes: [Company]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int!
}

"""A `Company` edge in the connection."""
type CompaniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Company` at the end of the edge."""
  node: Company
}

"""Methods to use when ordering `Company`."""
enum CompaniesOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Company implements Node {
  """Reads and enables pagination through a set of `Beverage`."""
  beveragesByCompanyId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BeveragesConnection!
  beveragesByCompanyIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]
  ): [Beverage!]!

  """Reads and enables pagination through a set of `Beverage`."""
  distributedBeverages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BeveragesConnection!
  distributedBeveragesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]
  ): [Beverage!]!
  id: Int!

  """Reads a single `Mascot` that is related to this `Company`."""
  mascotByCompanyId: Mascot
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Company` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CompanyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Company`"""
input CompanyInput {
  id: Int
  name: String!
}

"""
Represents an update to a `Company`. Fields that are set will be updated.
"""
input CompanyPatch {
  id: Int
  name: String
}

"""All input for the create `Beverage` mutation."""
input CreateBeverageInput {
  """The `Beverage` to be created by this mutation."""
  beverage: BeverageInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Beverage` mutation."""
type CreateBeveragePayload {
  """The `Beverage` that was created by this mutation."""
  beverage: Beverage

  """An edge for our `Beverage`. May be used by Relay 1."""
  beverageEdge(
    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BeveragesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByCompanyId: Company

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByDistributorId: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Company` mutation."""
input CreateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Company` to be created by this mutation."""
  company: CompanyInput!
}

"""The output of our create `Company` mutation."""
type CreateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was created by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Mascot` mutation."""
input CreateMascotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mascot` to be created by this mutation."""
  mascot: MascotInput!
}

"""The output of our create `Mascot` mutation."""
type CreateMascotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Mascot`."""
  companyByCompanyId: Company

  """The `Mascot` that was created by this mutation."""
  mascot: Mascot

  """An edge for our `Mascot`. May be used by Relay 1."""
  mascotEdge(
    """The method to use when ordering `Mascot`."""
    orderBy: [MascotsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): MascotsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteBeverageById` mutation."""
input DeleteBeverageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteBeverage` mutation."""
input DeleteBeverageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Beverage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Beverage` mutation."""
type DeleteBeveragePayload {
  """The `Beverage` that was deleted by this mutation."""
  beverage: Beverage

  """An edge for our `Beverage`. May be used by Relay 1."""
  beverageEdge(
    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BeveragesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByCompanyId: Company

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByDistributorId: Company
  deletedBeverageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCompanyById` mutation."""
input DeleteCompanyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCompany` mutation."""
input DeleteCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Company` mutation."""
type DeleteCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was deleted by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CompaniesEdge
  deletedCompanyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMascotByCompanyId` mutation."""
input DeleteMascotByCompanyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!
}

"""All input for the `deleteMascotById` mutation."""
input DeleteMascotByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMascot` mutation."""
input DeleteMascotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mascot` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Mascot` mutation."""
type DeleteMascotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Mascot`."""
  companyByCompanyId: Company
  deletedMascotId: ID

  """The `Mascot` that was deleted by this mutation."""
  mascot: Mascot

  """An edge for our `Mascot`. May be used by Relay 1."""
  mascotEdge(
    """The method to use when ordering `Mascot`."""
    orderBy: [MascotsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): MascotsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Mascot implements Node {
  """Reads a single `Company` that is related to this `Mascot`."""
  companyByCompanyId: Company
  companyId: Int!
  id: Int!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Mascot` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MascotCondition {
  """Checks for equality with the object’s `companyId` field."""
  companyId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Mascot`"""
input MascotInput {
  companyId: Int!
  id: Int
  name: String!
}

"""
Represents an update to a `Mascot`. Fields that are set will be updated.
"""
input MascotPatch {
  companyId: Int
  id: Int
  name: String
}

"""A connection to a list of `Mascot` values."""
type MascotsConnection {
  """
  A list of edges which contains the `Mascot` and cursor to aid in pagination.
  """
  edges: [MascotsEdge]!

  """A list of `Mascot` objects."""
  nodes: [Mascot]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mascot` you could get from the connection."""
  totalCount: Int!
}

"""A `Mascot` edge in the connection."""
type MascotsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mascot` at the end of the edge."""
  node: Mascot
}

"""Methods to use when ordering `Mascot`."""
enum MascotsOrderBy {
  COMPANY_ID_ASC
  COMPANY_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Beverage`."""
  createBeverage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBeverageInput!
  ): CreateBeveragePayload

  """Creates a single `Company`."""
  createCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyInput!
  ): CreateCompanyPayload

  """Creates a single `Mascot`."""
  createMascot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMascotInput!
  ): CreateMascotPayload

  """Deletes a single `Beverage` using its globally unique id."""
  deleteBeverage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBeverageInput!
  ): DeleteBeveragePayload

  """Deletes a single `Beverage` using a unique key."""
  deleteBeverageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBeverageByIdInput!
  ): DeleteBeveragePayload

  """Deletes a single `Company` using its globally unique id."""
  deleteCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyInput!
  ): DeleteCompanyPayload

  """Deletes a single `Company` using a unique key."""
  deleteCompanyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyByIdInput!
  ): DeleteCompanyPayload

  """Deletes a single `Mascot` using its globally unique id."""
  deleteMascot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMascotInput!
  ): DeleteMascotPayload

  """Deletes a single `Mascot` using a unique key."""
  deleteMascotByCompanyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMascotByCompanyIdInput!
  ): DeleteMascotPayload

  """Deletes a single `Mascot` using a unique key."""
  deleteMascotById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMascotByIdInput!
  ): DeleteMascotPayload

  """Updates a single `Beverage` using its globally unique id and a patch."""
  updateBeverage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBeverageInput!
  ): UpdateBeveragePayload

  """Updates a single `Beverage` using a unique key and a patch."""
  updateBeverageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBeverageByIdInput!
  ): UpdateBeveragePayload

  """Updates a single `Company` using its globally unique id and a patch."""
  updateCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyInput!
  ): UpdateCompanyPayload

  """Updates a single `Company` using a unique key and a patch."""
  updateCompanyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyByIdInput!
  ): UpdateCompanyPayload

  """Updates a single `Mascot` using its globally unique id and a patch."""
  updateMascot(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMascotInput!
  ): UpdateMascotPayload

  """Updates a single `Mascot` using a unique key and a patch."""
  updateMascotByCompanyId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMascotByCompanyIdInput!
  ): UpdateMascotPayload

  """Updates a single `Mascot` using a unique key and a patch."""
  updateMascotById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMascotByIdInput!
  ): UpdateMascotPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Beverage`."""
  allBeverages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BeveragesConnection
  allBeveragesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BeverageCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]
  ): [Beverage!]

  """Reads and enables pagination through a set of `Company`."""
  allCompanies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompaniesConnection
  allCompaniesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!]
  ): [Company!]

  """Reads and enables pagination through a set of `Mascot`."""
  allMascots(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MascotCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Mascot`."""
    orderBy: [MascotsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MascotsConnection
  allMascotsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MascotCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Mascot`."""
    orderBy: [MascotsOrderBy!]
  ): [Mascot!]

  """Reads a single `Beverage` using its globally unique `ID`."""
  beverage(
    """The globally unique `ID` to be used in selecting a single `Beverage`."""
    nodeId: ID!
  ): Beverage

  """Get a single `Beverage`."""
  beverageById(id: Int!): Beverage

  """Reads a single `Company` using its globally unique `ID`."""
  company(
    """The globally unique `ID` to be used in selecting a single `Company`."""
    nodeId: ID!
  ): Company

  """Get a single `Company`."""
  companyById(id: Int!): Company

  """Reads a single `Mascot` using its globally unique `ID`."""
  mascot(
    """The globally unique `ID` to be used in selecting a single `Mascot`."""
    nodeId: ID!
  ): Mascot

  """Get a single `Mascot`."""
  mascotByCompanyId(companyId: Int!): Mascot

  """Get a single `Mascot`."""
  mascotById(id: Int!): Mascot

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""All input for the `updateBeverageById` mutation."""
input UpdateBeverageByIdInput {
  """
  An object where the defined keys will be set on the `Beverage` being updated.
  """
  beveragePatch: BeveragePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `updateBeverage` mutation."""
input UpdateBeverageInput {
  """
  An object where the defined keys will be set on the `Beverage` being updated.
  """
  beveragePatch: BeveragePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Beverage` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Beverage` mutation."""
type UpdateBeveragePayload {
  """The `Beverage` that was updated by this mutation."""
  beverage: Beverage

  """An edge for our `Beverage`. May be used by Relay 1."""
  beverageEdge(
    """The method to use when ordering `Beverage`."""
    orderBy: [BeveragesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BeveragesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByCompanyId: Company

  """Reads a single `Company` that is related to this `Beverage`."""
  companyByDistributorId: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCompanyById` mutation."""
input UpdateCompanyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  companyPatch: CompanyPatch!
  id: Int!
}

"""All input for the `updateCompany` mutation."""
input UpdateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  companyPatch: CompanyPatch!

  """
  The globally unique `ID` which will identify a single `Company` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Company` mutation."""
type UpdateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was updated by this mutation."""
  company: Company

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CompaniesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMascotByCompanyId` mutation."""
input UpdateMascotByCompanyIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  companyId: Int!

  """
  An object where the defined keys will be set on the `Mascot` being updated.
  """
  mascotPatch: MascotPatch!
}

"""All input for the `updateMascotById` mutation."""
input UpdateMascotByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Mascot` being updated.
  """
  mascotPatch: MascotPatch!
}

"""All input for the `updateMascot` mutation."""
input UpdateMascotInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Mascot` being updated.
  """
  mascotPatch: MascotPatch!

  """
  The globally unique `ID` which will identify a single `Mascot` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Mascot` mutation."""
type UpdateMascotPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Company` that is related to this `Mascot`."""
  companyByCompanyId: Company

  """The `Mascot` that was updated by this mutation."""
  mascot: Mascot

  """An edge for our `Mascot`. May be used by Relay 1."""
  mascotEdge(
    """The method to use when ordering `Mascot`."""
    orderBy: [MascotsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): MascotsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}